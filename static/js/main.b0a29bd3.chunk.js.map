{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","localStorageToDos","localStorage","getItem","parsedToDos","JSON","parse","toDoState","atom","key","default","length","categoryState","TO_DO","toDoSelector","selector","get","currentToDos","currentCategory","filter","todo","category","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","toDo","oldToDos","allToDos","id","Date","now","text","stringifiedAllToDos","stringify","setItem","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","parentElement","todoArray","newTodoArray","Number","stringifiedNewToDos","ToDoList","toDos","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.b0a29bd3.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\n\nexport enum Categories {\n  'TO_DO' = 'TO_DO',\n  'DOING' = 'DOING',\n  'DONE' = 'DONE',\n}\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\n\nconst localStorageToDos = localStorage.getItem('ToDos');\nconst parsedToDos = JSON.parse(localStorageToDos as any);\n\nexport const toDoState = atom<IToDo[]>({\n  key: 'toDoState',\n  default: parsedToDos?.length > 0 ? parsedToDos : [],\n});\n\nexport const categoryState = atom<Categories>({\n  key: 'category',\n  default: Categories.TO_DO,\n});\n\nexport const toDoSelector = selector({\n  key: 'toDoSelector',\n  get: ({ get }) => {\n    const currentToDos = get(toDoState);\n    const currentCategory = get(categoryState);\n    const filteredToDoArray = currentToDos.filter(\n      (todo) => todo.category === currentCategory\n    );\n    return filteredToDoArray;\n  },\n});\n","import { useForm } from 'react-hook-form';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { categoryState, toDoState } from '../atoms';\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setValue('toDo', '');\n    setToDos((oldToDos) => {\n      const allToDos = [...oldToDos, { id: Date.now(), text: toDo, category }];\n      const stringifiedAllToDos = JSON.stringify(allToDos);\n      localStorage.setItem('ToDos', stringifiedAllToDos);\n      return allToDos;\n    });\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register('toDo', {\n          required: 'Please write a To Do',\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\nexport default CreateToDo;\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { Categories, IToDo, toDoState } from '../atoms';\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n\n  const handleDeleteToDo = (event: React.FormEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { parentElement },\n    } = event;\n\n    setToDos((todoArray) => {\n      const newTodoArray = todoArray.filter(\n        (todo) => todo.id !== Number(parentElement?.id)\n      );\n      const stringifiedNewToDos = JSON.stringify(newTodoArray);\n      localStorage.setItem('ToDos', stringifiedNewToDos);\n      return newTodoArray;\n    });\n  };\n  return (\n    <li id={id as any}>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n      <button onClick={handleDeleteToDo}>❌</button>\n    </li>\n  );\n}\nexport default ToDo;\n","import React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Categories, categoryState, toDoSelector } from '../atoms';\n\nimport CreateToDo from './CreateToDo';\nimport ToDo from './ToDo';\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  console.log(toDos);\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\nexport default ToDoList;\n","import { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\n\n// 전체 도큐먼트에 스타일 적용.\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n\tfont-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n\tline-height: 1.2;\n}\na {\n  text-decoration: none;\n\tcolor:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { DefaultTheme } from 'styled-components';\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#2f3640',\n  textColor: 'white',\n  accentColor: '#9c88ff',\n  cardBgColor: 'transparent',\n};\n"],"sourceRoot":""}